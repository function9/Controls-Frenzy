{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","progression","isLoading","unityContent","UnityContent","on","setState","className","class","style","backgroundColor","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","this","animated","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAMqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAa,EACbC,WAAW,GAOb,EAAKC,aAAe,IAAIC,eACtB,0BACA,wBAEF,EAAKD,aAAaE,GAAG,YAAY,SAAAJ,GAC/B,EAAKK,SAAS,CACZL,YAAaA,OAGjB,EAAKE,aAAaE,GAAG,UAAU,WAC7B,EAAKC,SAAS,CACZJ,WAAW,OAtBE,E,qDA4BjB,OACE,yBAAKK,UAAU,OACb,yBAAKC,MAAM,0BAA0BC,MAAO,CAACC,gBAAiB,4BAC1D,uBAAGF,MAAM,0BAAT,mBACA,4BAAQA,MAAM,iBAAiBG,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBAC9K,0BAAMR,MAAM,yBAGhB,yBAAKA,MAAM,2BAA2BS,GAAG,0BACrC,uBAAGT,MAAM,0CAAT,mBACA,wBAAIA,MAAM,sBACN,wBAAIA,MAAM,mBACN,uBAAGA,MAAM,WAAWU,KAAK,oCAAzB,QAAiE,0BAAMV,MAAM,WAAZ,eAErE,wBAAIA,MAAM,YACN,uBAAGA,MAAM,WAAWU,KAAK,iDAAzB,iBAKU,IAAzBC,KAAKnB,MAAME,WAAsB,6BAAK,gCAAQ,0CAErB,IAAzBiB,KAAKnB,MAAME,WAAsB,6BAAK,kBAAC,IAAD,CAAUkB,UAAQ,EAACC,MAAgC,IAAzBF,KAAKnB,MAAMC,eAC5E,kBAAC,IAAD,CAAOE,aAAcgB,KAAKhB,oB,GApDDmB,IAAMC,WCMnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f975576b.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Navbar, NavbarBrand, Progress, NavItem, Nav, NavbarToggler, Collapse, NavLink} from 'reactstrap';\nimport Unity, { UnityContent } from \"react-unity-webgl\";\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      progression: 0,\n      isLoading: true\n    };\n\n    // Next up create a new Unity Content object to \n    // initialise and define your WebGL build. The \n    // paths are relative from your index file.\n\n    this.unityContent = new UnityContent(\n      \"Build/BomberFrenzy.json\",\n      \"Build/UnityLoader.js\"\n    );\n    this.unityContent.on('progress', progression => {\n      this.setState({\n        progression: progression\n      });\n    });\n    this.unityContent.on(\"loaded\", () => {\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n        <nav class=\"navbar navbar-expand-lg\" style={{backgroundColor: 'rgb(51, 153, 255, 0.75)'}}>\n            <a class=\"navbar-brand d-lg-none\">Controls Frenzy</a>\n            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <a class=\"navbar-brand ml-auto d-none d-lg-block\">Controls Frenzy</a>\n                <ul class=\"navbar-nav mr-auto\">\n                    <li class=\"nav-item active\">\n                        <a class=\"nav-link\" href=\"https://vee-upatising.github.io/\">Home <span class=\"sr-only\">(current)</span></a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"https://vee-upatising.github.io/projects.html\">Projects</a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n        {this.state.isLoading === true && <div><center><h2>Loading</h2></center></div>}\n        {/* Only show loading bar when game is not fully loaded*/}\n        {this.state.isLoading === true && <div><Progress animated value={this.state.progression * 100} /></div>}\n        <Unity unityContent={this.unityContent} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}